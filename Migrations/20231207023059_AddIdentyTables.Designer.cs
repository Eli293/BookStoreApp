// <auto-generated />
using System;
using BookStoreApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStoreApp.Migrations
{
    [DbContext(typeof(BookstoreContext))]
    [Migration("20231207023059_AddIdentyTables")]
    partial class AddIdentyTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookStoreApp.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            AuthorId = 2,
                            FirstName = "Agatha",
                            LastName = "Christie"
                        },
                        new
                        {
                            AuthorId = 3,
                            FirstName = "Danielle",
                            LastName = "Steel"
                        },
                        new
                        {
                            AuthorId = 4,
                            FirstName = "David",
                            LastName = "McCullough"
                        },
                        new
                        {
                            AuthorId = 5,
                            FirstName = "J.R.R.",
                            LastName = "Tolkien"
                        },
                        new
                        {
                            AuthorId = 6,
                            FirstName = "Isaac",
                            LastName = "Asimov"
                        },
                        new
                        {
                            AuthorId = 7,
                            FirstName = "Harper",
                            LastName = "Lee"
                        },
                        new
                        {
                            AuthorId = 8,
                            FirstName = "Haword",
                            LastName = "Zinn"
                        },
                        new
                        {
                            AuthorId = 9,
                            FirstName = "Frank",
                            LastName = "Herbert"
                        },
                        new
                        {
                            AuthorId = 10,
                            FirstName = "F. Scott",
                            LastName = "Fitzgerald"
                        },
                        new
                        {
                            AuthorId = 11,
                            FirstName = "Jane",
                            LastName = "Austen"
                        },
                        new
                        {
                            AuthorId = 12,
                            FirstName = "William",
                            LastName = "Gibson"
                        },
                        new
                        {
                            AuthorId = 13,
                            FirstName = "J.D.",
                            LastName = "Salinger"
                        },
                        new
                        {
                            AuthorId = 14,
                            FirstName = "Ernest",
                            LastName = "Hemingway"
                        },
                        new
                        {
                            AuthorId = 15,
                            FirstName = "Yuval",
                            LastName = "Harari"
                        },
                        new
                        {
                            AuthorId = 16,
                            FirstName = "William",
                            LastName = "Blatty"
                        },
                        new
                        {
                            AuthorId = 17,
                            FirstName = "William",
                            LastName = "Shakespeare"
                        });
                });

            modelBuilder.Entity("BookStoreApp.Models.Book", b =>
                {
                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ISBN");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            ISBN = "978-0-385-08695-0",
                            AuthorId = 1,
                            BookId = 1,
                            GenreId = 4,
                            Price = 14.94,
                            Title = "Carrie"
                        },
                        new
                        {
                            ISBN = "978-0-670-22026-7",
                            AuthorId = 1,
                            BookId = 2,
                            GenreId = 1,
                            Price = 17.989999999999998,
                            Title = "Christine"
                        },
                        new
                        {
                            ISBN = "978-0-937986-50-9",
                            AuthorId = 1,
                            BookId = 3,
                            GenreId = 1,
                            Price = 11.619999999999999,
                            Title = "The Dark Tower: The Gunslinger"
                        },
                        new
                        {
                            ISBN = "978-0-670-81302-5",
                            AuthorId = 1,
                            BookId = 4,
                            GenreId = 4,
                            Price = 15.24,
                            Title = "It"
                        },
                        new
                        {
                            ISBN = "978-0-670-81364-3",
                            AuthorId = 1,
                            BookId = 5,
                            GenreId = 1,
                            Price = 13.69,
                            Title = "Misery"
                        },
                        new
                        {
                            ISBN = "978-0-06-207356-3",
                            AuthorId = 2,
                            BookId = 6,
                            GenreId = 5,
                            Price = 14.99,
                            Title = "The Murder of Roger Ackroyd"
                        },
                        new
                        {
                            ISBN = "978-0-06-207402-7",
                            AuthorId = 2,
                            BookId = 7,
                            GenreId = 5,
                            Price = 19.989999999999998,
                            Title = "Peril at End House"
                        },
                        new
                        {
                            ISBN = "978-0-06-207350-1",
                            AuthorId = 2,
                            BookId = 8,
                            GenreId = 5,
                            Price = 11.99,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            ISBN = "978-0-06-207348-8",
                            AuthorId = 2,
                            BookId = 9,
                            GenreId = 5,
                            Price = 12.99,
                            Title = "And Then There Were None"
                        },
                        new
                        {
                            ISBN = "978-0-06-207358-7",
                            AuthorId = 2,
                            BookId = 10,
                            GenreId = 5,
                            Price = 20.870000000000001,
                            Title = "The ABC Murders"
                        },
                        new
                        {
                            ISBN = "978-0-440-23762-4",
                            AuthorId = 3,
                            BookId = 11,
                            GenreId = 1,
                            Price = 12.99,
                            Title = "Safe Harbour"
                        },
                        new
                        {
                            ISBN = "978-0-552-14245-8",
                            AuthorId = 3,
                            BookId = 12,
                            GenreId = 1,
                            Price = 25.739999999999998,
                            Title = "The Gift"
                        },
                        new
                        {
                            ISBN = "978-0-593-33916-9",
                            AuthorId = 3,
                            BookId = 13,
                            GenreId = 3,
                            Price = 27.800000000000001,
                            Title = "All That Glitters"
                        },
                        new
                        {
                            ISBN = "978-1-9848-2146-1",
                            AuthorId = 3,
                            BookId = 14,
                            GenreId = 1,
                            Price = 24.73,
                            Title = "Finding Ashley"
                        },
                        new
                        {
                            ISBN = "978-0-385-33467-9",
                            AuthorId = 3,
                            BookId = 15,
                            GenreId = 3,
                            Price = 24.010000000000002,
                            Title = "His Bright Light"
                        },
                        new
                        {
                            ISBN = "978-0-446-31078-9",
                            AuthorId = 7,
                            BookId = 16,
                            GenreId = 1,
                            Price = 10.99,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            ISBN = "978-1-77426-642-7",
                            AuthorId = 17,
                            BookId = 17,
                            GenreId = 3,
                            Price = 16.989999999999998,
                            Title = "Romeo and Juliet"
                        },
                        new
                        {
                            ISBN = "978-0-307-74365-7",
                            AuthorId = 1,
                            BookId = 18,
                            GenreId = 4,
                            Price = 35.780000000000001,
                            Title = "The Shining"
                        },
                        new
                        {
                            ISBN = "978-0-06-239734-8",
                            AuthorId = 8,
                            BookId = 19,
                            GenreId = 6,
                            Price = 24.09,
                            Title = "A People's History of the United States"
                        },
                        new
                        {
                            ISBN = "978-0-441-17271-9",
                            AuthorId = 9,
                            BookId = 20,
                            GenreId = 2,
                            Price = 19.989999999999998,
                            Title = "Dune"
                        },
                        new
                        {
                            ISBN = "978-1-4209-5871-3",
                            AuthorId = 11,
                            BookId = 21,
                            GenreId = 1,
                            Price = 12.99,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            ISBN = "979-84-9779-677-3",
                            AuthorId = 17,
                            BookId = 22,
                            GenreId = 3,
                            Price = 50.890000000000001,
                            Title = "Hamlet"
                        },
                        new
                        {
                            ISBN = "978-0-06-209436-0",
                            AuthorId = 16,
                            BookId = 23,
                            GenreId = 4,
                            Price = 14.99,
                            Title = "The Exorcist"
                        },
                        new
                        {
                            ISBN = "978-0-09-959008-8",
                            AuthorId = 15,
                            BookId = 24,
                            GenreId = 6,
                            Price = 15.99,
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            ISBN = "978-0-441-00746-2",
                            AuthorId = 12,
                            BookId = 25,
                            GenreId = 2,
                            Price = 21.25,
                            Title = "Neuromancer"
                        },
                        new
                        {
                            ISBN = "978-0-7432-7356-5",
                            AuthorId = 10,
                            BookId = 26,
                            GenreId = 1,
                            Price = 60.990000000000002,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            ISBN = "979-86-510-2746-0",
                            AuthorId = 17,
                            BookId = 27,
                            GenreId = 3,
                            Price = 28.989999999999998,
                            Title = "Macbeth"
                        },
                        new
                        {
                            ISBN = "978-0-7432-2672-1",
                            AuthorId = 4,
                            BookId = 28,
                            GenreId = 3,
                            Price = 16.5,
                            Title = "1776"
                        },
                        new
                        {
                            ISBN = "978-1-4767-2875-9",
                            AuthorId = 4,
                            BookId = 29,
                            GenreId = 6,
                            Price = 32.990000000000002,
                            Title = "The Wright Brothers"
                        },
                        new
                        {
                            ISBN = "978-0-553-29335-7",
                            AuthorId = 6,
                            BookId = 30,
                            GenreId = 2,
                            Price = 13.99,
                            Title = "Foundation"
                        },
                        new
                        {
                            ISBN = "978-0-00-847128-6",
                            AuthorId = 5,
                            BookId = 31,
                            GenreId = 7,
                            Price = 14.99,
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            ISBN = "978-0-261-10273-6",
                            AuthorId = 5,
                            BookId = 32,
                            GenreId = 7,
                            Price = 17.989999999999998,
                            Title = "The Silmarillion"
                        },
                        new
                        {
                            ISBN = "978-0-09-178183-5",
                            AuthorId = 10,
                            BookId = 33,
                            GenreId = 1,
                            Price = 18.989999999999998,
                            Title = "Love in the Night"
                        },
                        new
                        {
                            ISBN = "978-0-316-76948-8",
                            AuthorId = 13,
                            BookId = 34,
                            GenreId = 1,
                            Price = 13.67,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            ISBN = "978-0-684-80122-3",
                            AuthorId = 14,
                            BookId = 35,
                            GenreId = 1,
                            Price = 17.989999999999998,
                            Title = "Old Man and the Sea"
                        });
                });

            modelBuilder.Entity("BookStoreApp.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Novel"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "SciFi"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Mystery"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "History"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("BookStoreApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookStoreApp.Models.Book", b =>
                {
                    b.HasOne("BookStoreApp.Models.Author", "authorObject")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreApp.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("authorObject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookStoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookStoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookStoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStoreApp.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
